
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.practica1.source;

import java_cup.runtime.*;
import com.example.practica1.source.sym.*;
import com.example.practica1.source.objetos.*;
import java.util.ArrayList;
import java.util.List;
import com.example.practica1.source.reportes.ManejadorErrores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /** Default constructor. */
    @Deprecated
    public parser() {super();}

    /** Constructor which sets the default scanner. */
    @Deprecated
    public parser(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\042\000\002\002\005\000\002\002\004\000\002\002" +
                            "\005\000\002\002\004\000\002\002\004\000\002\003\006" +
                            "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
                            "\002\003\006\000\002\003\003\000\002\004\007\000\002" +
                            "\004\003\000\002\007\011\000\002\007\003\000\002\010" +
                            "\005\000\002\010\003\000\002\011\007\000\002\011\003" +
                            "\000\002\005\004\000\002\005\003\000\002\013\005\000" +
                            "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
                            "\013\004\000\002\013\005\000\002\013\003\000\002\013" +
                            "\003\000\002\006\007\000\002\006\003\000\002\012\003" +
                            "\000\002\012\003\000\002\012\003" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\120\000\006\004\004\007\005\001\002\000\016\003" +
                            "\053\005\057\021\056\022\052\023\054\026\060\001\002" +
                            "\000\006\003\010\010\011\001\002\000\004\002\007\001" +
                            "\002\000\004\002\000\001\002\000\010\002\ufff5\004\ufff5" +
                            "\007\ufff5\001\002\000\004\011\014\001\002\000\010\002" +
                            "\ufffd\004\004\007\005\001\002\000\004\002\uffff\001\002" +
                            "\000\004\016\015\001\002\000\012\003\021\013\016\016" +
                            "\017\027\022\001\002\000\012\003\031\013\016\016\017" +
                            "\027\022\001\002\000\012\003\031\013\016\016\017\027" +
                            "\022\001\002\000\014\003\031\013\016\016\017\020\037" +
                            "\027\022\001\002\000\024\003\uffe5\012\uffe5\013\uffe5\014" +
                            "\uffe5\015\uffe5\016\uffe5\017\uffe3\020\uffe5\027\uffe5\001\002" +
                            "\000\024\003\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
                            "\uffe6\017\uffe6\020\uffe6\027\uffe6\001\002\000\004\017\036" +
                            "\001\002\000\022\003\uffed\012\027\013\025\014\026\015" +
                            "\030\016\uffed\020\uffed\027\uffed\001\002\000\012\003\031" +
                            "\013\016\016\017\027\022\001\002\000\012\003\031\013" +
                            "\016\016\017\027\022\001\002\000\012\003\031\013\016" +
                            "\016\017\027\022\001\002\000\012\003\031\013\016\016" +
                            "\017\027\022\001\002\000\024\003\uffe5\012\uffe5\013\uffe5" +
                            "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\027\uffe5\001" +
                            "\002\000\024\003\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
                            "\016\uffe9\017\uffe9\020\uffe9\027\uffe9\001\002\000\024\003" +
                            "\uffec\012\uffec\013\uffec\014\026\015\030\016\uffec\017\uffec" +
                            "\020\uffec\027\uffec\001\002\000\024\003\uffea\012\uffea\013" +
                            "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\027\uffea" +
                            "\001\002\000\024\003\uffeb\012\uffeb\013\uffeb\014\026\015" +
                            "\030\016\uffeb\017\uffeb\020\uffeb\027\uffeb\001\002\000\010" +
                            "\002\ufff6\004\ufff6\007\ufff6\001\002\000\012\003\031\013" +
                            "\016\016\017\027\022\001\002\000\022\003\uffee\012\027" +
                            "\013\025\014\026\015\030\016\uffee\020\uffee\027\uffee\001" +
                            "\002\000\014\003\031\013\016\016\017\020\042\027\022" +
                            "\001\002\000\010\003\044\005\046\006\043\001\002\000" +
                            "\004\017\uffe2\001\002\000\004\017\uffe0\001\002\000\004" +
                            "\017\uffe4\001\002\000\004\017\uffe1\001\002\000\014\012" +
                            "\027\013\025\014\026\015\030\017\050\001\002\000\024" +
                            "\003\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
                            "\uffe7\020\uffe7\027\uffe7\001\002\000\024\003\uffe8\012\uffe8" +
                            "\013\uffe8\014\026\015\030\016\uffe8\017\uffe8\020\uffe8\027" +
                            "\uffe8\001\002\000\004\016\120\001\002\000\010\002\ufff7" +
                            "\004\ufff7\007\ufff7\001\002\000\004\016\107\001\002\000" +
                            "\010\002\ufffe\004\004\007\005\001\002\000\004\016\103" +
                            "\001\002\000\004\016\074\001\002\000\004\016\061\001" +
                            "\002\000\012\003\064\013\016\016\017\027\022\001\002" +
                            "\000\004\017\073\001\002\000\014\003\031\013\016\016" +
                            "\017\020\065\027\022\001\002\000\024\003\uffe5\012\uffe5" +
                            "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\ufff3\020\uffe5\027" +
                            "\uffe5\001\002\000\012\003\031\013\016\016\017\027\022" +
                            "\001\002\000\014\003\031\013\016\016\017\020\067\027" +
                            "\022\001\002\000\012\003\031\013\016\016\017\027\022" +
                            "\001\002\000\014\003\031\013\016\016\017\020\071\027" +
                            "\022\001\002\000\004\024\072\001\002\000\004\017\ufff4" +
                            "\001\002\000\010\002\ufff8\004\ufff8\007\ufff8\001\002\000" +
                            "\012\003\076\013\016\016\017\027\022\001\002\000\014" +
                            "\003\031\013\016\016\017\020\101\027\022\001\002\000" +
                            "\024\003\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
                            "\017\ufff1\020\uffe5\027\uffe5\001\002\000\004\017\100\001" +
                            "\002\000\010\002\ufff9\004\ufff9\007\ufff9\001\002\000\012" +
                            "\003\064\013\016\016\017\027\022\001\002\000\004\017" +
                            "\ufff2\001\002\000\012\003\064\013\016\016\017\027\022" +
                            "\001\002\000\004\017\105\001\002\000\010\002\ufffc\004" +
                            "\ufffc\007\ufffc\001\002\000\004\002\001\001\002\000\012" +
                            "\003\111\013\016\016\017\027\022\001\002\000\014\003" +
                            "\031\013\016\016\017\020\114\027\022\001\002\000\024" +
                            "\003\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
                            "\uffef\020\uffe5\027\uffe5\001\002\000\004\017\113\001\002" +
                            "\000\010\002\ufffa\004\ufffa\007\ufffa\001\002\000\012\003" +
                            "\031\013\016\016\017\027\022\001\002\000\014\003\031" +
                            "\013\016\016\017\020\116\027\022\001\002\000\012\003" +
                            "\064\013\016\016\017\027\022\001\002\000\004\017\ufff0" +
                            "\001\002\000\012\003\076\013\016\016\017\027\022\001" +
                            "\002\000\004\017\122\001\002\000\010\002\ufffb\004\ufffb" +
                            "\007\ufffb\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\120\000\004\002\005\001\001\000\004\003\054\001" +
                            "\001\000\004\004\011\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
                            "\012\001\001\000\002\001\001\000\002\001\001\000\010" +
                            "\005\017\006\022\013\023\001\001\000\004\013\050\001" +
                            "\001\000\004\013\046\001\001\000\004\013\037\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\013\034\001\001\000\004\013\033" +
                            "\001\001\000\004\013\032\001\001\000\004\013\031\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\006\005\040\013\023\001\001\000\002\001\001\000\004" +
                            "\013\037\001\001\000\004\012\044\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\002\105\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\010\005\062\007\061\013\023\001\001" +
                            "\000\002\001\001\000\004\013\037\001\001\000\002\001" +
                            "\001\000\006\005\065\013\023\001\001\000\004\013\037" +
                            "\001\001\000\006\005\067\013\023\001\001\000\004\013" +
                            "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\010\005\074\010\076\013\023\001\001\000" +
                            "\004\013\037\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\010\005\062\007\101\013\023\001" +
                            "\001\000\002\001\001\000\010\005\062\007\103\013\023" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\010\005\107\011\111\013\023\001\001\000\004" +
                            "\013\037\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\005\114\013\023\001\001\000\004" +
                            "\013\037\001\001\000\010\005\062\007\116\013\023\001" +
                            "\001\000\002\001\001\000\010\005\074\010\120\013\023" +
                            "\001\001\000\002\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 1;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}




    private int id =0;
    private List<ManejadorFigura> manejadorFigura;
    private List<ManejadorErrores>manejadorError;

    public parser(LexicoGraph lex){
        super(lex);
        this.manejadorFigura = new ArrayList();
        this.manejadorError = new ArrayList();
    }

    public void syntax_error(Symbol cur_token){
        System.out.println("Error sintactico en la linea " + cur_token.left + "  y Columna: " + cur_token.right +" token: " +  symbl_name_from_id(cur_token.sym));
        if (symbl_name_from_id(cur_token.sym).equals("ERROR") ) {
            System.out.println(cur_token.value);
            manejadorError.add(new ManejadorErrores((String)cur_token.value,cur_token.left,cur_token.right,"Lexico","Simbolo no perteneciente al lenguaje"));
        }else{
            manejadorError.add(new ManejadorErrores(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right,"sintactico","No perteneciente a ninguna estructura valida"));
        }

    }
    public void report_fatal_error(String message, Object info){
        System.out.println("error fatal no recuperable: " + message + "objeto: " + info);
    }
    private Double conDob(String s){
        return Double.parseDouble(s);
    }

    public List getManejadorFigura(){
        return manejadorFigura;
    }
    private String[] addMF(Object var){
        String s =(String)var;
        String[] ps=s.split("\\|");
        id++;
        return ps;
    }
    private void addCirculo(Object var){
        String[] ps = addMF(var);
        manejadorFigura.add(new ManejadorFigura(id,new Circulo(conDob(ps[0]),conDob(ps[1]),conDob(ps[2]),ps[3])));
    }
    private void addRect(Object var){
        String[] ps = addMF(var);
        manejadorFigura.add(new ManejadorFigura(id,new Rectangulo(conDob(ps[0]),conDob(ps[1]),conDob(ps[2]),conDob(ps[3]),ps[4])));
    }
    private void addLinea(Object var){
        String[] ps = addMF(var);
        manejadorFigura.add(new ManejadorFigura(id,new Linea(conDob(ps[0]),conDob(ps[1]),conDob(ps[2]),conDob(ps[3]),ps[4])));
    }
    private void addCPol(Object var){
        String[] ps = addMF(var);
        manejadorFigura.add(new ManejadorFigura(id,new Poligono(conDob(ps[0]),conDob(ps[1]),conDob(ps[2]),conDob(ps[3]),conDob(ps[4]),ps[5])));
    }

    private void addAnim(Object var){
        String[] ps = addMF(var);
        manejadorFigura.add(new ManejadorFigura(id,new Animacion(conDob(ps[0]),conDob(ps[1]),ps[2])));
    }
    private void addCuadrado(Object var){
        String[] ps = addMF(var);
        manejadorFigura.add(new ManejadorFigura(id,new Cuadrado(conDob(ps[0]),conDob(ps[1]),conDob(ps[2]),ps[3])));
    }


    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$parser$actions {
        private final parser parser;

        /** Constructor */
        CUP$parser$actions(parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
                int                        CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack            CUP$parser$stack,
                int                        CUP$parser$top)
                throws java.lang.Exception
        {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

            /* select the action based on the action number */
            switch (CUP$parser$act_num)
            {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // star ::= GRAFICAR fig star
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("star",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // $START ::= star EOF
                {
                    Object RESULT =null;
                    int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = start_val;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$parser$parser.done_parsing();
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // star ::= ANIMAR obj star
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("star",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // star ::= GRAFICAR fig
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("star",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // star ::= ANIMAR obj
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("star",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // fig ::= CIRCULO PA1 fin_pa PA2
                {
                    Object RESULT =null;
                    int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    addCirculo(var);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fig",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // fig ::= RECTANGULO PA1 one_exp PA2
                {
                    Object RESULT =null;
                    int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    addRect(var);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fig",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // fig ::= POLIGONO PA1 two_exp PA2
                {
                    Object RESULT =null;
                    int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    addCPol(var);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fig",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // fig ::= LINEA PA1 one_exp PA2
                {
                    Object RESULT =null;
                    int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    addLinea(var);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fig",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // fig ::= CUADRADO PA1 fin_pa PA2
                {
                    Object RESULT =null;
                    int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    addCuadrado(var);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fig",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // fig ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fig",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // obj ::= OBJETO ANTERIOR PA1 anim PA2
                {
                    Object RESULT =null;
                    int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    addAnim(var);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("obj",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // obj ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("obj",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // fin_pa ::= expr_all COMA expr_all COMA expr_all COMA COLOR
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e + "|"+ e1 +"|" + e2 +"|" + cl ;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_pa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // fin_pa ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_pa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // one_exp ::= expr_all COMA fin_pa
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e + "|"+ e1 ;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("one_exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // one_exp ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("one_exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // two_exp ::= expr_all COMA expr_all COMA fin_pa
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e + "|"+ e1 +"|" + e2 ;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("two_exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // two_exp ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("two_exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // expr_all ::= expr_all expr
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_all",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // expr_all ::= expr
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_all",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // expr ::= expr SUMA expr
                {
                    Double RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1+e2;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // expr ::= expr RESTA expr
                {
                    Double RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1-e2;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // expr ::= expr MULT expr
                {
                    Double RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1*e2;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // expr ::= expr DIV expr
                {
                    Double RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e1/e2;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // expr ::= RESTA expr
                {
                    Double RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = -e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // expr ::= PA1 expr PA2
                {
                    Double RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // expr ::= NUMBER
                {
                    Double RESULT =null;
                    int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Double.parseDouble(n);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // expr ::= error
                {
                    Double RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // anim ::= expr_all COMA expr_all COMA tip_an
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e + "|"+ e1 +"|" + e2 ;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("anim",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // anim ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("anim",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // tip_an ::= CURVA
                {
                    Object RESULT =null;
                    RESULT = "CURVA";
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tip_an",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // tip_an ::= LINEA
                {
                    Object RESULT =null;
                    RESULT = "LINEA";
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tip_an",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // tip_an ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tip_an",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$parser$do_action(
                int                        CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack            CUP$parser$stack,
                int                        CUP$parser$top)
                throws java.lang.Exception
        {
            return CUP$parser$do_action_part00000000(
                    CUP$parser$act_num,
                    CUP$parser$parser,
                    CUP$parser$stack,
                    CUP$parser$top);
        }
    }

}
